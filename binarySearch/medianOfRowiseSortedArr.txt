
int Solution::findMedian(vector<vector<int> > &A) {
    
    int r=A.size();
    int c=A[0].size();
    
    int desiredCount=((r*c)/2) +1;
    
    int mini=INT_MIN;
    int maxi=INT_MAX;    
    
    //finding min and max elem
    for(int i=0; i<r; i++){
        
        mini=min(mini,A[i][0]); //1
        maxi=max(maxi,A[i][c-1]); //9
    }
    
    int mid;//5
    int currCount=0;
    //finding a mid val for which we get desiredCount
    while(mini<maxi){
        
        mid=(mini+maxi)/2;
        currCount=0;
        for(int i=0; i<r; i++) 
            currCount += upper_bound(A[i].begin(),A[i].end(),mid)-A[i].begin();//elems smaller than mid
            
        if(currCount<desiredCount){//if no of elems smaller than mid< desiredCount, means no itself chota h  
            mini=mid+1;
        }
        
        else
            maxi=mid;
    }
    
    return mini;
}
